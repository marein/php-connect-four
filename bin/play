#!/usr/bin/env php
<?php

namespace {

    use Marein\ConnectFour\Domain\Game\Configuration;
    use Marein\ConnectFour\Domain\Game\Exception\ColumnAlreadyFilledException;
    use Marein\ConnectFour\Domain\Game\Exception\OutOfSizeException;
    use Marein\ConnectFour\Domain\Game\Game;
    use Marein\ConnectFour\Domain\Game\Player;
    use Marein\ConnectFour\Domain\Game\Stone;

    require_once __DIR__ . '/../vendor/autoload.php';

    /**
     * Example implementation
     */

    $player1Id = uniqid();
    $player2Id = uniqid();

    $game = Game::open(
        Configuration::common(),
        new Player($player1Id, Stone::red()),
        new Player($player2Id, Stone::yellow())
    );

    renderGame($game);

    while (!$game->isDraw() && !$game->isWin()) {
        consoleMove($game, $player1Id);
        renderGame($game);

        if (!$game->isWin()) {
            cpuMove($game, $player2Id);
            renderGame($game);
        }
    }

    if ($game->isDraw()) {
        echo 'Draw';
    } else {
        echo 'Winner ' . colorizeStoneColor((string)$game->winner()->stone()->color());
    }

    echo PHP_EOL . PHP_EOL;

    function renderGame(Game $game): void
    {
        // Clear screen
        echo "\033\143" . PHP_EOL;

        $width = $game->board()->size()->width();
        $fillLength = strlen((string)$width);
        $fillLength = $fillLength % 2 == 0 ? $fillLength + 1 : $fillLength;

        // Print header
        foreach (range(1, $width) as $column) {
            echo sprintf(
                '| %0' . $fillLength . 'd ',
                $column
            );
        }
        echo '|' . PHP_EOL . PHP_EOL;

        // Print fields
        $fields = $game->board()->fields();
        $filler = str_repeat(' ', (int)floor($fillLength / 2));
        foreach ($fields as $i => $field) {
            echo sprintf(
                '| %s%s%s %s',
                $filler,
                colorizeStoneColor((string)$field),
                $filler,
                ($i + 1) % $width == 0 ? '|' . PHP_EOL . PHP_EOL : '' // Line break after each row
            );
        }
    }

    function colorizeStoneColor(string $color): string
    {
        return str_replace(
            [Stone::NONE, Stone::RED, Stone::YELLOW],
            [' ', "\033[0;31mO\033[0m", "\033[1;33mO\033[0m"],
            $color
        );
    }

    function consoleMove(Game $game, string $id): void
    {
        $width = $game->board()->size()->width();

        try {
            $column = trim(readline('Choose your column [1 - ' . $width . ']: '));
            $game->move($id, (int)$column);
        } catch (OutOfSizeException $e) {
            consoleMove($game, $id);
        } catch (ColumnAlreadyFilledException $e) {
            consoleMove($game, $id);
        }
    }

    function cpuMove(Game $game, string $id): void
    {
        echo 'Waiting for NPC...';

        $width = $game->board()->size()->width();

        usleep((int)(0.5 * 1000000));

        try {
            $column = rand(1, $width);
            $game->move($id, $column);
        } catch (ColumnAlreadyFilledException $e) {
            cpuMove($game, $id);
        }
    }
}